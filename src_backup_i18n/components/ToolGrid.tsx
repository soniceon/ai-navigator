import Link from 'next/link';
import { useState } from 'react';
import { aiTools, AiTool } from '../data/aiTools';
import { useTranslation } from 'next-i18next';
import { messages } from '@/locales';
import { useSearch } from '@/contexts/SearchContext';

// 自动补全 typeLabels，确保所有 type 都有友好标签
const allTypes = Array.from(new Set(aiTools.map(t => t.type)));
const defaultLabels = {
  zh: '其他', en: {t('auto_other_6311ae')}, ja: 'その他', ko: '기타', de: {t('auto_andere_0f9580')}, fr: {t('auto_autre_977a72')}, es: {t('auto_otro_c22952')}, ru: 'Другое'
};
const typeLabels: Record<string, Record<string, string>> = {
  chatbot: {
    zh: '聊天机器人', en: {t('auto_chatbot_60b4e9')}, ja: 'チャットボット', ko: '챗봇', de: {t('auto_chatbot_60b4e9')}, fr: {t('auto_chatbot_60b4e9')}, es: {t('auto_chatbot_60b4e9')}, ru: 'Чат-бот'
  },
  image: {
    zh: '图像生成', en: {t('auto_image_generation_c7a4b1')}, ja: '画像生成', ko: '이미지 생성', de: {t('auto_bildgenerierung_e67da8')}, fr: "Génération d'images", es: 'Generación de imágenes', ru: 'Генерация изображений'
  },
  coding: {
    zh: '编程', en: {t('auto_coding_cddcad')}, ja: 'コーディング', ko: '코딩', de: {t('auto_programmierung_92fddb')}, fr: {t('auto_codage_3c3323')}, es: 'Codificación', ru: 'Кодирование'
  },
  productivity: {
    zh: '生产力', en: {t('auto_productivity_73015e')}, ja: '生産性', ko: '생산성', de: 'Produktivität', fr: 'Productivité', es: {t('auto_productividad_5469dc')}, ru: 'Продуктивность'
  },
  design: {
    zh: '设计', en: {t('auto_design_1afa74')}, ja: 'デザイン', ko: '디자인', de: {t('auto_design_1afa74')}, fr: {t('auto_conception_994179')}, es: 'Diseño', ru: 'Дизайн'
  },
  writing: {
    zh: '写作', en: {t('auto_writing_af96ab')}, ja: 'ライティング', ko: '글쓰기', de: {t('auto_schreiben_081059')}, fr: 'Écriture', es: {t('auto_escritura_95ac64')}, ru: 'Письмо'
  },
  media: {
    zh: '媒体', en: {t('auto_media_3b5635')}, ja: 'メディア', ko: '미디어', de: {t('auto_medien_5296a6')}, fr: 'Médias', es: {t('auto_medios_e81c44')}, ru: 'Медиа'
  },
  marketing: {
    zh: '营销', en: {t('auto_marketing_7cb15e')}, ja: 'マーケティング', ko: '마케팅', de: {t('auto_marketing_7cb15e')}, fr: {t('auto_marketing_7cb15e')}, es: {t('auto_marketing_7cb15e')}, ru: 'Маркетинг'
  },
  app: {
    zh: '应用', en: t('auto_app_ac863f'), ja: 'アプリ', ko: '앱', de: t('auto_app_ac863f'), fr: {t('auto_application_e49874')}, es: 'Aplicación', ru: 'Приложение'
  }
};
allTypes.forEach(type => {
  if (!typeLabels[type]) {
    typeLabels[type] = {
      zh: type,
      en: type.charAt(0).toUpperCase() + type.slice(1),
      ja: type,
      ko: type,
      de: type,
      fr: type,
      es: type,
      ru: type,
    };
  }
});

const featured = [
  {
    name: 'iFable',
    desc: 'Your personal anime universe, generated by AI.',
    icon: 'https://ifable.com/favicon.ico',
  },
  {
    name: {t('auto_soul_machines_bb1901')},
    desc: t('auto_global_leader_in_humanizing_ai_1190af'),
    icon: 'https://www.soulmachines.com/favicon.ico',
  },
  {
    name: {t('auto_salesape_ai_6b7909')},
    desc: t('auto_your_ai_sales_representative_793fed'),
    icon: 'https://salesape.com/favicon.ico',
  },
];

export default function ToolGrid() {
  const { t, i18n } = useTranslation('common');
  const { keyword, setKeyword } = useSearch();
  const [type, setType] = useState('all');
  const types = Array.from(new Set(aiTools.map(t => t.type)));
  const lang = i18n.language.split('-')[0];

  const filtered = aiTools.filter(tool => {
    const matchType = type === 'all' || tool.type === type;
    const matchSearch =
      tool.name.zh.includes(keyword) ||
      tool.name.en.toLowerCase().includes(keyword.toLowerCase()) ||
      tool.desc.zh.includes(keyword) ||
      tool.desc.en.toLowerCase().includes(keyword.toLowerCase());
    return matchType && matchSearch;
  });

  // 新增：自动获取精选工具
  const featuredTools = aiTools.filter(t => t.featured);

  return (
    <div className="flex gap-8" id="toolgrid-anchor">
      {/* 主内容区 */}
      <div className="flex-1 min-w-0 space-y-16">
        {/* 搜索和分类标签区 */}
        <div className="flex flex-col gap-4 mb-8">
          <div className="flex flex-wrap gap-2">
            <button
              className={`px-4 py-1 rounded-full font-medium border transition
                ${type === 'all'
                  ? 'bg-purple-600 text-white border-purple-600'
                  : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 border-transparent hover:bg-purple-100 dark:hover:bg-purple-900'}
              `}
              onClick={() => setType('all')}
            >
              {t('all_categories')}
            </button>
            {types.map(t => (
              <button
                key={t}
                className={`px-4 py-1 rounded-full font-medium border transition
                  ${type === t
                    ? 'bg-purple-600 text-white border-purple-600'
                    : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 border-transparent hover:bg-purple-100 dark:hover:bg-purple-900'}
                `}
                onClick={() => setType(t)}
              >
                {typeLabels[t]?.[lang] || t}
              </button>
            ))}
          </div>
        </div>
        {/* 工具卡片区 */}
        {types.filter(t => type === 'all' || t === type).map(typeKey => (
          <div key={typeKey}>
            <h2 id={typeKey} className="text-2xl font-bold mb-6 text-purple-700 dark:text-purple-300 flex items-center gap-2">
              <span className="text-lg">#</span>
              {typeLabels[typeKey]?.[lang] || typeKey}
            </h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-5 gap-6">
              {filtered.filter(t => t.type === typeKey).map(tool => (
                <Link
                  key={tool.id}
                  href={`/tools/${tool.id}`}
                  className="bg-white dark:bg-gray-900 rounded-2xl shadow hover:shadow-xl transition p-6 flex flex-col items-start border border-gray-100 dark:border-gray-800 relative"
                >
                  {tool.featured && (
                    <span className="absolute top-3 right-3 bg-yellow-400 text-xs font-bold px-2 py-0.5 rounded-full text-gray-900">★ Featured</span>
                  )}
                  <span className="text-3xl mb-2">
                    <span className="relative w-10 h-10 flex items-center justify-center">
                      <img
                        src={`https://www.google.com/s2/favicons?sz=64&domain_url=${encodeURIComponent(tool.website || '')}`}
                        alt={String(tool.name?.[lang] ?? '')}
                        className="w-8 h-8"
                        onError={e => { e.currentTarget.style.display = 'none'; }}
                      />
                      <span className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none select-none">
                        {tool.icon || tool.name[lang][0]}
                      </span>
                    </span>
                  </span>
                  <div className="font-bold text-lg mb-1 text-gray-900 dark:text-white">{tool.name && tool.name[lang] ? tool.name[lang] : ''}</div>
                  <div className="text-xs text-purple-600 dark:text-purple-300 mb-2">{typeLabels[tool.type]?.[lang] || tool.type}</div>
                  <div className="text-gray-500 dark:text-gray-300 text-sm mb-3 line-clamp-2">{tool.desc && tool.desc[lang] ? tool.desc[lang] : ''}</div>
                  <div className="flex gap-2 text-xs text-gray-400 dark:text-gray-400 mb-2">
                    <span>⭐ {typeof tool.rating === 'number' ? tool.rating : 0}</span>
                    <span>👥 {tool.users ?? ''}</span>
                  </div>
                  <div className="flex flex-wrap gap-1 mt-auto">
                    {tool.tags.map(tag => (
                      <span key={tag} className="bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-200 px-2 py-0.5 rounded text-xs">{t(`tag_${tag}`) === `tag_${tag}` ? tag : t(`tag_${tag}`)}</span>
                    ))}
                  </div>
                </Link>
              ))}
            </div>
          </div>
        ))}
      </div>
      {/* 精选栏（右侧） */}
      <aside className="hidden lg:block w-80 flex-shrink-0">
        <div className="bg-white dark:bg-gray-900 rounded-2xl shadow p-6 w-full border border-gray-100 dark:border-gray-800">
          <div className="flex items-center gap-2 mb-4">
            <span className="text-yellow-500 text-xl">★</span>
            <span className="font-bold text-lg">{t('featured.title')}</span>
          </div>
          <div className="flex flex-col gap-4">
            {featuredTools.map(tool => (
              <Link key={tool.id} href={`/tools/${tool.id}`} className="flex items-center gap-3 group relative">
                <span className="relative w-8 h-8 flex items-center justify-center">
                  <img
                    src={`https://www.google.com/s2/favicons?sz=64&domain_url=${encodeURIComponent(tool.website || '')}`}
                    alt={String(tool.name?.[lang] ?? '')}
                    className="w-8 h-8"
                    onError={e => { e.currentTarget.style.display = 'none'; }}
                  />
                  <span className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none select-none">
                    {tool.icon || tool.name[lang][0]}
                  </span>
                </span>
                <div className="flex-1 min-w-0">
                  <div className="font-bold text-gray-900 dark:text-white group-hover:text-purple-600 truncate">{tool.name[lang]}</div>
                  <div className="text-xs text-gray-500 dark:text-gray-300 truncate">{tool.desc[lang]}</div>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </aside>
    </div>
  );
} 